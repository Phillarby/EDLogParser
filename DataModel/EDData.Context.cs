//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EDDataEntities : DbContext
    {
        public EDDataEntities()
            : base("name=EDDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__RefactorLog> C__RefactorLog { get; set; }
        public virtual DbSet<Asset> Assets { get; set; }
        public virtual DbSet<History> Histories { get; set; }
        public virtual DbSet<Journey> Journeys { get; set; }
        public virtual DbSet<Logfile> Logfiles { get; set; }
        public virtual DbSet<Profile> Profiles { get; set; }
        public virtual DbSet<System> Systems { get; set; }
        public virtual DbSet<AssetType> AssetTypes { get; set; }
    
        public virtual int AddAsset(ObjectParameter iD, Nullable<int> assetTypeID, string description, Nullable<int> parentID)
        {
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("AssetTypeID", assetTypeID) :
                new ObjectParameter("AssetTypeID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAsset", iD, assetTypeIDParameter, descriptionParameter, parentIDParameter);
        }
    
        public virtual int AddLogFile(ObjectParameter id, Nullable<int> profileID, string filename, Nullable<System.DateTime> fileDate, Nullable<System.DateTime> lastParse, Nullable<int> linesParsed)
        {
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("Filename", filename) :
                new ObjectParameter("Filename", typeof(string));
    
            var fileDateParameter = fileDate.HasValue ?
                new ObjectParameter("FileDate", fileDate) :
                new ObjectParameter("FileDate", typeof(System.DateTime));
    
            var lastParseParameter = lastParse.HasValue ?
                new ObjectParameter("LastParse", lastParse) :
                new ObjectParameter("LastParse", typeof(System.DateTime));
    
            var linesParsedParameter = linesParsed.HasValue ?
                new ObjectParameter("LinesParsed", linesParsed) :
                new ObjectParameter("LinesParsed", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddLogFile", id, profileIDParameter, filenameParameter, fileDateParameter, lastParseParameter, linesParsedParameter);
        }
    
        public virtual int AddProfile(ObjectParameter id, ObjectParameter securityToken, ObjectParameter tokenExpiry, string commander, string email, string password)
        {
            var commanderParameter = commander != null ?
                new ObjectParameter("Commander", commander) :
                new ObjectParameter("Commander", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProfile", id, securityToken, tokenExpiry, commanderParameter, emailParameter, passwordParameter);
        }
    }
}
